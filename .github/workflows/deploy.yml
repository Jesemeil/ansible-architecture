name: CI/CD Pipeline for Simple Spring Boot Project

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '21'

      - name: Build project
        run: mvn clean package -DskipTests

      - name: List files in target directory
        run: ls -al target

      - name: Upload JAR as artifact
        uses: actions/upload-artifact@v3
        with:
          name: simple-spring-boot-jar
          path: target/simple-spring-boot-0.0.1-SNAPSHOT.jar

      - name: Build Docker image
        run: docker build -t simple-spring-boot .

      - name: Push Docker image to DockerHub
        env:
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
        run: |
          echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USERNAME" --password-stdin
          docker tag simple-spring-boot ${{ secrets.DOCKER_USERNAME }}/simple-spring-boot:latest
          docker push ${{ secrets.DOCKER_USERNAME }}/simple-spring-boot:latest

  deploy:
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: SSH into EC2 and Deploy
        env:
          EC2_IP: ${{ secrets.EC2_IP }}
          PRIVATE_KEY: ${{ secrets.EC2_PRIVATE_KEY }}
        run: |
          # Save the private key to a file
          echo "$PRIVATE_KEY" > ec2_key.pem
          chmod 400 ec2_key.pem
          
          # Ensure the .ssh directory exists and add EC2 instance's host key to known hosts
          mkdir -p ~/.ssh
          ssh-keyscan -H ${EC2_IP} >> ~/.ssh/known_hosts
          
          # SSH into EC2 and perform Docker-related tasks
          ssh -i ec2_key.pem ubuntu@${EC2_IP} 'bash -s' << 'ENDSSH'
            # Ensure Docker is installed on EC2 instance
            if ! command -v docker &> /dev/null; then
              sudo apt update -y
              sudo apt install docker.io -y
            fi

            # Pull the latest Docker image from DockerHub
            sudo docker pull ${{ secrets.DOCKER_USERNAME }}/simple-spring-boot:latest

            # Stop any running containers of the same application
            sudo docker ps -q --filter "name=simple-spring-boot" | xargs -r sudo docker stop
            sudo docker ps -q --filter "name=simple-spring-boot" | xargs -r sudo docker rm

            # Run the Docker container
            sudo docker run -d --name simple-spring-boot -p 8080:8080 ${{ secrets.DOCKER_USERNAME }}/simple-spring-boot:latest
          ENDSSH
